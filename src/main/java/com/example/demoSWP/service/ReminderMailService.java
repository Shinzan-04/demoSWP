package com.example.demoSWP.service;

import com.example.demoSWP.dto.EmailDetail;
import com.example.demoSWP.entity.ARVRegimen;
import com.example.demoSWP.entity.Customer;
import com.example.demoSWP.entity.Reminder;
import com.example.demoSWP.enums.ReminderStatus;
import com.example.demoSWP.repository.ARVRegimenRepository;
import com.example.demoSWP.repository.ReminderRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.time.LocalDate;
import java.util.List;

@Component
@RequiredArgsConstructor
public class ReminderMailService {

    private final ReminderService reminderService;
    private final EmailService emailService;
    private final ARVRegimenRepository arvRegimenRepository;
    private final ReminderRepository reminderRepository;

    // Test cron m·ªói 10 gi√¢y
    @Scheduled(cron = "*/10 * * * * *")
    // Prod cron 8h s√°ng m·ªói ng√†y
    // @Scheduled(cron = "0 0 8 * * *")
    public void generateAndSendReminderDaily() {
        LocalDate today = LocalDate.now();

        List<ARVRegimen> regimens = arvRegimenRepository.findAllByEndDateGreaterThanEqual(today);

        for (ARVRegimen regimen : regimens) {
            // N·∫øu ƒë√£ c√≥ reminder h√¥m nay ‚Üí b·ªè qua
            boolean exists = reminderRepository.existsByArvRegimenAndReminderDate(regimen, today.atTime(8, 0));
            if (exists) continue;

            Reminder reminder = new Reminder();
            reminder.setArvRegimen(regimen);
            reminder.setReminderDate(today.atTime(8, 0));
            reminder.setStatus(ReminderStatus.PENDING);

            // Chu·∫©n b·ªã email
            EmailDetail email = new EmailDetail();
            email.setReceiver(regimen.getCustomer().getAccount());

            if (today.isEqual(regimen.getEndDate())) {
                // Ng√†y cu·ªëi c√πng ‚Üí g·ª≠i l·ªùi nh·∫Øc t√°i kh√°m
                reminder.setReminderContent("üìå H√¥m nay l√† ng√†y cu·ªëi c√πng c·ªßa li·ªáu tr√¨nh ARV. M·ªùi b·∫°n t√°i kh√°m.");
                email.setSubject("üìå K·∫øt th√∫c li·ªáu tr√¨nh ARV ‚Äì M·ªùi t√°i kh√°m");
                email.setHeaderNote("Ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã ƒë√£ k·∫øt th√∫c");
                email.setMessage("H√¥m nay l√† ng√†y cu·ªëi c√πng theo k·∫ø ho·∫°ch ƒëi·ªÅu tr·ªã.");
                email.setSubMessage("Vui l√≤ng ƒë·∫∑t l·ªãch t√°i kh√°m ƒë·ªÉ ƒë∆∞·ª£c theo d√µi ti·∫øp.");
                email.setLink("http://your-app.com/booking");
                email.setButton("ƒê·∫∑t l·ªãch kh√°m");
                email.setFooterText("C·∫£m ∆°n b·∫°n ƒë√£ tu√¢n th·ªß ƒëi·ªÅu tr·ªã.");
                reminder.setStatus(ReminderStatus.DONE);
            } else {
                // Ng√†y b√¨nh th∆∞·ªùng
                reminder.setReminderContent("üíä Nh·∫Øc nh·ªü u·ªëng thu·ªëc ARV ng√†y " + today);
                email.setSubject("üíä Nh·∫Øc nh·ªü u·ªëng thu·ªëc ARV");
                email.setHeaderNote("U·ªëng thu·ªëc ƒë√∫ng gi·ªù");
                email.setMessage("B·∫°n c·∫ßn u·ªëng thu·ªëc ARV theo ƒë√∫ng ph√°c ƒë·ªì h√¥m nay.");
                email.setSubMessage("Gi·ªØ ƒë√∫ng l·ªãch tr√¨nh ƒë·ªÉ ƒë·∫°t hi·ªáu qu·∫£.");
                email.setLink("http://your-app.com/reminder");
                email.setButton("Xem nh·∫Øc nh·ªü");
                email.setFooterText("Ch√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh.");
                reminder.setStatus(ReminderStatus.SENT);
            }

            // G·ª≠i mail v√† l∆∞u reminder
            try {
                emailService.sendEmail(email);
                reminderRepository.save(reminder);
                System.out.println("‚úÖ Reminder sent to " + regimen.getCustomer().getEmail());
            } catch (Exception e) {
                System.err.println("‚ùå G·ª≠i th·∫•t b·∫°i: " + e.getMessage());
            }
        }
    }
}
